#!/usr/bin/env ruby

=begin
 Copyright (c) 2010 David Andersen | davidx.org | davidx at davidx.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
=end

require 'rubygems'
require 'choice'
require 'fileutils'
require 'httparty'
require 'csv'

$:.unshift File.dirname(__FILE__) + '/../../lib/'

require 'ganglia'

Choice.options do
  header ''
  header 'Specific options:'

  option :host, :required => true do
    long '--host=HOST'
    desc 'The file\'s age to report'
  end

  option :help do
    long '--help'
    desc 'Show this message'
  end
end

choices=Choice.choices
host   = choices[:host]

module Haproxy
  class Stats
    attr_reader :hostname
    include HTTParty
    format :plain
    basic_auth 'stats', 'motdepassestat'

    def initialize(hostname)
      @hostname = hostname
    end

    def read
      output = self.class.get("http://#{hostname}/haproxy?stats;csv")
      lines  = CSV.parse(output)
      data   = {}
      lines.each do |row|

        pxname  = row.shift
        svname  = row.shift
        columns = [
            "qcur",
            "qmax",
            "scur",
            "smax",
            "slim",
            "stot",
            "bin",
            "bout",
            "dreq",
            "dresp",
            "ereq",
            "econ",
            "eresp",
            "wretr",
            "wredis",
            "status",
            "weight",
            "act",
            "bck",
            "chkfail",
            "chkdown",
            "lastchg",
            "downtime",
            "qlimit",
            "pid",
            "iid",
            "sid",
            "throttle",
            "lbtot",
            "tracked",
            "type",
            "rate",
            "rate_lim",
            "rate_max"]
        data[pxname] = {} unless data.key?(pxname)
        data[pxname][svname] = {} unless data[pxname].key?(pxname)
        columns.each_with_index do |column, i|
          data[pxname][svname][column] = row[i]
        end
      end
      data.delete("# pxname")
      data
    end

    def hosts
      hostlist=[]
      status  = self.read
      status.each { |vip, servers|
        servers.each { |server, status|
          hostlist.push([server, status])
        }
      }
      hostlist.shift
      hostlist.pop
      hostlist
    end
  end
end


stats                = Haproxy::Stats.new(host)
hosts                = stats.hosts
haproxy_metric_names = {'scur'  => "current_sessions",
                        'qcur'  => "current_queue",
                        'dresp' => "denied_response",
                        'econ'  => "error_connections",
                        'eresp' => "error_responses"
}


hosts.each do |host, status|
  haproxy_metric_names.each do |name, metric_name|
    p host + " " + status[name] + " " + metric_name + "" + name if ENV.key?('DEBUG')
    Ganglia.gmetric(
        :name  => host + '_' + metric_name,
        :value => status[name],
        :units => "count",
        :type  => 'uint32'
    )
  end
end
